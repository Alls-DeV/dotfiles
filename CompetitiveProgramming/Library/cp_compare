#!/usr/bin/env bash

RED='\033[0;31m'
BLUE='\033[0;36m'
NC='\033[0m' # no color

function ProgressBar {
    let _progress=(${1}*100/${2}*100)/100
    let _done=(${_progress}*4)/10
    let _left=40-$_done
    _fill=$(printf "%${_done}s")
    _empty=$(printf "%${_left}s")
    printf "\rProgress : [${_fill// /#}${_empty// /-}] ${_progress}%%"
}

function show_help {
    echo "Usage: cp_compare solution1 solution2 generator num_tests"
    echo ""
    echo "solution1, solution2 and generator are respectively the names of c++ files. Compares the outputs of two solutions of a problem, checking if they give the same outputs."
    echo ""
    echo "Options:"
    echo "  -h, --help  Show this help message and exit."
}

# Check for help option
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    show_help
    exit 0
fi

# Check for correct number of arguments
if [ "$#" -ne 4 ]; then
    echo -e "${RED}Error: Incorrect number of parameters.${NC}"
    show_help
    exit 1
fi

# Create a temporary directory for executables and I/O files inside the current directory
current_dir=$(pwd)
temp_dir_id=$(mktemp -u XXXXXXXXXX)
temp_dir="$current_dir/cp_compare-$temp_dir_id"
mkdir -p "$temp_dir"

# Compile the solutions and generator
g++ -Ofast -std=c++20 $1.cpp -o $temp_dir/$1
g++ -Ofast -std=c++20 $2.cpp -o $temp_dir/$2
g++ -Ofast -std=c++20 $3.cpp -o $temp_dir/$3

# Check if the executables were created successfully
if [ ! -f $temp_dir/$1 ] || [ ! -f $temp_dir/$2 ] || [ ! -f $temp_dir/$3 ]; then
    rm -rf $temp_dir
    exit 0
fi

# Run the tests
for ((testNum=0;testNum<$4;testNum++))
do
    ProgressBar ${testNum} ${4}
    $temp_dir/$3 > $temp_dir/input
    if [ $? -ne 0 ]; then
        echo ""
        echo -e "${RED}Generator crashed!${NC}"
        cp $temp_dir/input $current_dir/input_$temp_dir_id
        rm -rf $temp_dir
        exit 1
    fi
    $temp_dir/$2 < $temp_dir/input > $temp_dir/out2
    if [ $? -ne 0 ]; then
        echo ""
        echo -e "${RED}$2 crashed!${NC}"
        echo -e "${BLUE}Input:${NC}"
        cat $temp_dir/input
        cp $temp_dir/input $current_dir/input_$temp_dir_id
        rm -rf $temp_dir
        exit 1
    fi
    $temp_dir/$1 < $temp_dir/input > $temp_dir/out1
    if [ $? -ne 0 ]; then
        echo ""
        echo -e "${RED}$1 crashed!${NC}"
        echo -e "${BLUE}Input:${NC}"
        cat $temp_dir/input
        cp $temp_dir/input $current_dir/input_$temp_dir_id
        rm -rf $temp_dir
        exit 1
    fi
    if !(cmp -s "$temp_dir/out1" "$temp_dir/out2")
    then
        echo ""
        echo -e "${RED}Error found!"
        echo -e "${BLUE}Input:${NC}"
        cat $temp_dir/input
        echo -e "${BLUE}$1 output:${NC}"
        cat $temp_dir/out1
        echo -e "${BLUE}$2 output:${NC}"
        cat $temp_dir/out2
        cp $temp_dir/input $current_dir/input_$temp_dir_id
        rm -rf $temp_dir
        exit 0
    fi
done

echo ""
echo -e "${BLUE}Passed $4 tests!!!${NC}"
rm -rf $temp_dir
exit 0
